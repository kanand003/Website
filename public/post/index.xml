<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Anand Kumar</title>
    <link>https://kanand003.github.io/Website/post/</link>
    <description>Recent content in Posts on Anand Kumar</description>
    <generator>Hugo 0.125.2</generator>
    <language>en</language>
    <lastBuildDate>Wed, 08 May 2024 21:57:34 +0530</lastBuildDate>
    <atom:link href="https://kanand003.github.io/Website/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Structs_VS_Classes</title>
      <link>https://kanand003.github.io/Website/post/structs_vs_classes/</link>
      <pubDate>Wed, 08 May 2024 21:57:34 +0530</pubDate>
      <guid>https://kanand003.github.io/Website/post/structs_vs_classes/</guid>
      <description>What are Structs? Structs are similar to classes in that they represent data structures that can contain data members and function members. Structs are best used when you need to represent simple data types, such as integers, strings, or other basic data types.&#xA;A variable of a struct type directly contains the data of the struct, whereas a variable of a class type contains a reference to the data, the latter known as an object.</description>
    </item>
    <item>
      <title>Lerping</title>
      <link>https://kanand003.github.io/Website/post/lerping/</link>
      <pubDate>Fri, 03 May 2024 22:52:30 +0530</pubDate>
      <guid>https://kanand003.github.io/Website/post/lerping/</guid>
      <description>What is Lerping? Lerp, or Linear Interpolation, is a mathematical function in Unity that returns a value between two others at a point on a linear scale.&#xA;Most commonly it’s used for moving or changing values over a period of time.&#xA;So when you are doing &amp;ldquo;Linear Interpolation&amp;rdquo; you are Linearly inserting a new point between 2 points. Linear Interpolation is inserting a new point between 2 points on a straight line.</description>
    </item>
    <item>
      <title>Serialization</title>
      <link>https://kanand003.github.io/Website/post/serialization/</link>
      <pubDate>Fri, 03 May 2024 22:52:30 +0530</pubDate>
      <guid>https://kanand003.github.io/Website/post/serialization/</guid>
      <description>What is Serialization? Serialization is the process of converting a data object which is a combination of code and data into a series of bytes which is saved as transmissible object. The data can then be transferred to another destination.&#xA;Why do we need to Serialize? Serialization enables us to save the state of an object and recreate the object in a new location.Serialization encompasses both the storage of the object and exchange of data.</description>
    </item>
    <item>
      <title>Caching</title>
      <link>https://kanand003.github.io/Website/post/caching/</link>
      <pubDate>Mon, 22 Apr 2024 22:03:31 +0530</pubDate>
      <guid>https://kanand003.github.io/Website/post/caching/</guid>
      <description>Caching What is Caching? A cache is a high speed data storage which stores a subset of data, typically transient in nature, so that future requests for that data are served up faster than is possible by accessing the data’s primary storage location. Caching allows you to efficiently reuse previously retrieved or computed data.&#xA;How does Caching work? The data in a cache is generally stored in fast access hardware such as RAM (Random-access memory) and may also be used in correlation with a software component.</description>
    </item>
    <item>
      <title>Singleton</title>
      <link>https://kanand003.github.io/Website/post/singleton/</link>
      <pubDate>Mon, 22 Apr 2024 22:03:31 +0530</pubDate>
      <guid>https://kanand003.github.io/Website/post/singleton/</guid>
      <description>Singleton Pattern in Unity 1. Introductory Overview Pattern Name: Singleton Pattern One-Sentence Summary: The Singleton pattern ensures that a class has only one instance and provides a global point of access to it, making it ideal for managing game-wide services in Unity. 2. Problem Context Practical Scenario: In many games, you need a centralized manager for handling game states, audio, or settings. For example, a GameManager that persists across scenes to track player progress and game state.</description>
    </item>
    <item>
      <title>My 1st post</title>
      <link>https://kanand003.github.io/Website/post/first-post/</link>
      <pubDate>Tue, 15 Sep 2020 11:30:03 +0000</pubDate>
      <guid>https://kanand003.github.io/Website/post/first-post/</guid>
      <description>Introduction This is bold text, and this is emphasized text.&#xA;I&amp;rsquo;m going to start writing from today.</description>
    </item>
  </channel>
</rss>
